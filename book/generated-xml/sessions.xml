<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="sessions_sessions">
<title>Sessions</title>
<simpara>HTTP is a stateless protocol. While some view this as a disadvantage, advocates
of RESTful web development laud this as a plus. When state is removed from the
picture, we get some automatic benefits, such as easier scalability and
caching.  You can draw many parallels with the non-mutable nature of Haskell in
general.</simpara>
<simpara>As much as possible, RESTful applications should avoid storing state about an
interaction with a client. However, it is sometimes unavoidable. Features like
shopping carts are the classic example, but other more mundane interactions
like proper login handling can be greatly enhanced by proper usage of sessions.</simpara>
<simpara>This chapter will describe how Yesod stores session data, how you can access
this data, and some special functions to help you make the most of sessions.</simpara>
<section id="sessions_clientsession">
<title>Clientsession</title>
<simpara>One of the earliest packages spun off from Yesod was clientsession. This
package uses encryption and signatures to store data in a client-side cookie.
The encryption prevents the user from inspecting the data, and the signature
ensures that the session can be neither hijacked nor tampered with.</simpara>
<simpara>It might sound like a bad idea from an efficiency standpoint to store data in a
cookie. After all, this means that the data must be sent on every request.
However, in practice, clientsession can be a great boon for performance.</simpara>
<itemizedlist>
<listitem>
<simpara>
No server side database lookup is required to service a request.
</simpara>
</listitem>
<listitem>
<simpara>
We can easily scale horizontally: each request contains all the information
  we need to send a response.
</simpara>
</listitem>
<listitem>
<simpara>
To avoid undue bandwidth overhead, production sites can serve their static
  content from a separate domain name, thereby skipping transmission of the
  session cookie for each request.
</simpara>
</listitem>
</itemizedlist>
<simpara>Storing megabytes of information in the session will be a bad idea. But for
that matter, most session implementations recommend against such practices. If
you really need massive storage for a user, it is best to store a lookup key in
the session, and put the actual data in a database.</simpara>
<simpara>All of the interaction with clientsession is handled by Yesod internally, but
there are a few spots where you can tweak the behavior just a bit.</simpara>
</section>
<section id="sessions_controlling_sessions">
<title>Controlling sessions</title>
<simpara>By default, your Yesod application will use clientsession for its session
storage, getting the encryption key from the client <literal>client-session-key.aes</literal>
and giving a session a two hour timeout. (Note: timeout is measured from the
last time the client sent a request to the site, <emphasis role="strong">not</emphasis> from when then session
was first created.) However, all of those points can be modified by overriding
the <literal>makeSessionBackend</literal> method in the Yesod typeclass.</simpara>
<simpara>One simple way to override this method is to simply turn off session handling;
to do so, return <literal>Nothing</literal>. If your app has absolutely no session needs,
disabling them can give a bit of a performance increase. But be careful about
disabling sessions: this will also disable such features as Cross-Site Request
Forgery protection.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">instance Yesod App where
    makeSessionBackend _ = return Nothing</programlisting>
<simpara>Another common approach is to modify the filepath or timeout value, but
continue using client-session. To do so, use the <literal>defaultClientSessionBackend</literal>
helper function:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">instance Yesod App where
    makeSessionBackend _ = do
        let minutes = 24 * 60 -- 1 day
            filepath = "mykey.aes"
        backend &lt;- defaultClientSessionBackend minutes filepath</programlisting>
<simpara>There are a few other functions to grant you more fine-grained control of
client-session, but they will rarely be necessary. Please see <literal>Yesod.Core</literal>'s
documentation if you are interested. It&#8217;s also possible to implement some other
form of session, such as a server side session. To my knowledge, at the time of
writing, no other such implementations exist.</simpara>
<note><simpara>If the given key file does not exist, it will be created and populated
with a randomly generated key. When you deploy your app to production, you
should include a pregenerated key with it, otherwise all existing sessions will
be invalidated when your new key file is generated. The scaffolding addresses
this for you.</simpara></note>
</section>
<section id="sessions_session_operations">
<title>Session Operations</title>
<simpara>Like most frameworks, a session in Yesod is a key-value store. The base session
API boils down to four functions: <literal>lookupSession</literal> gets a value for a key (if
available), <literal>getSession</literal> returns all of the key/value pairs, <literal>setSession</literal> sets
a value for a key, and <literal>deleteSession</literal> clears a value for a key.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
{-# LANGUAGE MultiParamTypeClasses #-}
import           Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
import qualified Web.ClientSession   as CS
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET POST
|]

getHomeR :: Handler Html
getHomeR = do
    sess &lt;- getSession
    defaultLayout
        [whamlet|
            &lt;form method=post&gt;
                &lt;input type=text name=key&gt;
                &lt;input type=text name=val&gt;
                &lt;input type=submit&gt;
            &lt;h1&gt;#{show sess}
        |]

postHomeR :: Handler ()
postHomeR = do
    (key, mval) &lt;- runInputPost $ (,) &lt;$&gt; ireq textField "key" &lt;*&gt; iopt textField "val"
    case mval of
        Nothing -&gt; deleteSession key
        Just val -&gt; setSession key val
    liftIO $ print (key, mval)
    redirect HomeR

instance Yesod App where
    -- Make the session timeout 1 minute so that it's easier to play with
    makeSessionBackend _ = do
        backend &lt;- defaultClientSessionBackend 1 "keyfile.aes"
        return $ Just backend

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warp 3000 App</programlisting>
</section>
<section id="sessions_messages">
<title>Messages</title>
<simpara>One usage of sessions previously alluded to is messages. They come to solve a
common problem in web development: the user performs a <literal>POST</literal> request, the web
app makes a change, and then the web app wants to <emphasis>simultaneously</emphasis> redirect the
user to a new page and send the user a success message. (This is known as
Post/Redirect/Get.)</simpara>
<simpara>Yesod provides a pair of functions to enable this workflow: <literal>setMessage</literal> stores
a value in the session, and <literal>getMessage</literal> both reads the value most recently put
into the session, and clears the old value so it is not displayed twice.</simpara>
<simpara>It is recommended to have a call to <literal>getMessage</literal> in <literal>defaultLayout</literal> so that any
available message is shown to a user immediately, without having to add
<literal>getMessage</literal> calls to every handler.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/            HomeR       GET
/set-message SetMessageR POST
|]

instance Yesod App where
    defaultLayout widget = do
        pc &lt;- widgetToPageContent widget
        mmsg &lt;- getMessage
        withUrlRenderer
            [hamlet|
                $doctype 5
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;title&gt;#{pageTitle pc}
                        ^{pageHead pc}
                    &lt;body&gt;
                        $maybe msg &lt;- mmsg
                            &lt;p&gt;Your message was: #{msg}
                        ^{pageBody pc}
            |]

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

getHomeR :: Handler Html
getHomeR = defaultLayout
    [whamlet|
        &lt;form method=post action=@{SetMessageR}&gt;
            My message is: #
            &lt;input type=text name=message&gt;
            &lt;button&gt;Go
    |]

postSetMessageR :: Handler ()
postSetMessageR = do
    msg &lt;- runInputPost $ ireq textField "message"
    setMessage $ toHtml msg
    redirect HomeR

main :: IO ()
main = warp 3000 App</programlisting>
<figure><title>Initial page load, no message</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/messages-1.png"/>
  </imageobject>
  <textobject><phrase>images/messages-1.png</phrase></textobject>
</mediaobject>
</figure>
<figure><title>New message entered in text box</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/messages-1.png"/>
  </imageobject>
  <textobject><phrase>images/messages-1.png</phrase></textobject>
</mediaobject>
</figure>
<figure><title>After form submit, message appears at top of page</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/messages-3.png"/>
  </imageobject>
  <textobject><phrase>images/messages-3.png</phrase></textobject>
</mediaobject>
</figure>
<figure><title>After refresh, the message is cleared</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/messages-4.png"/>
  </imageobject>
  <textobject><phrase>images/messages-4.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="sessions_ultimate_destination">
<title>Ultimate Destination</title>
<simpara>Not to be confused with a horror film, ultimate destination is a technique
originally developed for Yesod&#8217;s authentication framework, but which has more
general usefulness.  Suppose a user requests a page that requires
authentication. If the user is not yet logged in, you need to send him/her to
the login page. A well-designed web app will then <emphasis>send them back to the first
page they requested</emphasis>. That&#8217;s what we call the ultimate destination.</simpara>
<simpara><literal>redirectUltDest</literal> sends the user to the ultimate destination set in his/her
session, clearing that value from the session. It takes a default destination
as well, in case there is no destination set. For setting the session, there
are three options:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>setUltDest</literal> sets the destination to the given URL, which can be given
   either as a textual URL or a type-safe URL.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>setUltDestCurrent</literal> sets the destination to the currently requested URL.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>setUltDestReferer</literal> sets the destination based on the <literal>Referer</literal> header (the
   page that led the user to the current page).
</simpara>
</listitem>
</itemizedlist>
<simpara>Additionally, there is the <literal>clearUltDest</literal> function, to drop the ultimate
destination value from the session if present.</simpara>
<simpara>Let&#8217;s look at a small sample app. It will allow the user to set his/her name in
the session, and then tell the user his/her name from another route. If the
name hasn&#8217;t been set yet, the user will be redirected to the set name page,
with an ultimate destination set to come back to the current page.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/         HomeR     GET
/setname  SetNameR  GET POST
/sayhello SayHelloR GET
|]

instance Yesod App

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

getHomeR :: Handler Html
getHomeR = defaultLayout
    [whamlet|
        &lt;p&gt;
            &lt;a href=@{SetNameR}&gt;Set your name
        &lt;p&gt;
            &lt;a href=@{SayHelloR}&gt;Say hello
    |]

-- Display the set name form
getSetNameR :: Handler Html
getSetNameR = defaultLayout
    [whamlet|
        &lt;form method=post&gt;
            My name is #
            &lt;input type=text name=name&gt;
            . #
            &lt;input type=submit value="Set name"&gt;
    |]

-- Retreive the submitted name from the user
postSetNameR :: Handler ()
postSetNameR = do
    -- Get the submitted name and set it in the session
    name &lt;- runInputPost $ ireq textField "name"
    setSession "name" name

    -- After we get a name, redirect to the ultimate destination.
    -- If no destination is set, default to the homepage
    redirectUltDest HomeR

getSayHelloR :: Handler Html
getSayHelloR = do
    -- Lookup the name value set in the session
    mname &lt;- lookupSession "name"
    case mname of
        Nothing -&gt; do
            -- No name in the session, set the current page as
            -- the ultimate destination and redirect to the
            -- SetName page
            setUltDestCurrent
            setMessage "Please tell me your name"
            redirect SetNameR
        Just name -&gt; defaultLayout [whamlet|&lt;p&gt;Welcome #{name}|]

main :: IO ()
main = warp 3000 App</programlisting>
</section>
<section id="sessions_summary">
<title>Summary</title>
<simpara>Sessions are the primary means by which we bypass the statelessness imposed by
HTTP. We shouldn&#8217;t consider this an escape hatch to perform whatever actions we
want: statelessness in web applications is a virtue, and we should respect it
whenever possible. However, there are specific cases where it is vital to
retain some state.</simpara>
<simpara>The session API in Yesod is very simple. It provides a key-value store, and a
few convenience functions built on top for common use cases. If used properly,
with small payloads, sessions should be an unobtrusive part of your web
development.</simpara>
</section>
</section>
</article>
