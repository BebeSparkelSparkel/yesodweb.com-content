<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="single-process-pubsub_single_process_pub_sub">
<title>Single process pub-sub</title>
<simpara>The previous example was admittedly quite simple. Let&#8217;s build on that
foundation (pun intended) to do something a bit more interesting. Suppose we
have a workflow on our site like the following:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Enter some information on page X, and submit.
</simpara>
</listitem>
<listitem>
<simpara>
Submission starts a background job, and the user is redirected to a page to view status of that job.
</simpara>
</listitem>
<listitem>
<simpara>
That second page will subscribe to updates from the background job and display them to the user.
</simpara>
</listitem>
</orderedlist>
<simpara>The core principle here is the ability to let one thread publish updates, and
have another thread subscribe to receive those updates. This is known generally
as pub/sub, and fortunately is very easy to achieve in Haskell via STM.</simpara>
<simpara>Like the previous chapter, let me start off with the caveat: this technique
only works properly if you have a single web application process. If you have
two different servers and a load balancer, you&#8217;d either need sticky sessions or
some other solution to make sure that the requests from a single user are going
to the same machine. In those situations, you may want to consider using an
external pubsub solution, such as Redis.</simpara>
<simpara>With that caveat out of the way, let&#8217;s get started.</simpara>
<section id="single-process-pubsub_foundation_datatype">
<title>Foundation datatype</title>
<simpara>We&#8217;ll need two different mutable references in our foundation. The first will
keep track of the next "job id" we&#8217;ll hand out. Each of these background jobs
we&#8217;ll be represented by a unique identifier, which will be used in our URLs.
The second piece of data will be a map from the job ID to the broadcast channel
used for publishing updates. In code:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data App = App
    { jobs    :: TVar (IntMap (TChan (Maybe Text)))
    , nextJob :: TVar Int
    }</programlisting>
<simpara>Notice that our <literal>TChan</literal> contains <literal>Maybe Text</literal> values. The reason for the
<literal>Maybe</literal> wrapper is so that we can indicate that the channel is complete, by
providing a <literal>Nothing</literal> value.</simpara>
</section>
<section id="single-process-pubsub_allocating_a_job">
<title>Allocating a job</title>
<simpara>In order to allocate a job, we need to:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Get a job ID.
</simpara>
</listitem>
<listitem>
<simpara>
Create a new broadcast channel.
</simpara>
</listitem>
<listitem>
<simpara>
Add the channel to the channel map.
</simpara>
</listitem>
</orderedlist>
<simpara>Due to the beauty of STM, this is pretty easy.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">(jobId, chan) &lt;- liftIO $ atomically $ do
    jobId &lt;- readTVar nextJob
    writeTVar nextJob $! jobId + 1
    chan &lt;- newBroadcastTChan
    m &lt;- readTVar jobs
    writeTVar jobs $ IntMap.insert jobId chan m
    return (jobId, chan)</programlisting>
</section>
<section id="single-process-pubsub_fork_our_background_job">
<title>Fork our background job</title>
<simpara>There are many different ways we could go about this, and they depend entirely
on what the background job is going to be. Here&#8217;s a minimal example of a
background job that prints out a few messages, with a 1 second delay between
each message. Note how after our final message, we broadcast a <literal>Nothing</literal> value
and remove our channel from the map of channels.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">liftIO $ forkIO $ do
    threadDelay 1000000
    atomically $ writeTChan chan $ Just "Did something\n"
    threadDelay 1000000
    atomically $ writeTChan chan $ Just "Did something else\n"
    threadDelay 1000000
    atomically $ do
        writeTChan chan $ Just "All done\n"
        writeTChan chan Nothing
        m &lt;- readTVar jobs
        writeTVar jobs $ IntMap.delete jobId m</programlisting>
</section>
<section id="single-process-pubsub_view_progress">
<title>View progress</title>
<simpara>For this demonstration, I&#8217;ve elected for a very simple progress viewing: a
plain text page with stream response. There are a few other possibilities here:
an HTML page that auto-refreshes every X seconds or using eventsource or
websockets. I encourage you to give those a shot also, but here&#8217;s the simplest
implementation I can think of:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getViewProgressR jobId = do
    App {..} &lt;- getYesod
    mchan &lt;- liftIO $ atomically $ do
        m &lt;- readTVar jobs
        case IntMap.lookup jobId m of
            Nothing -&gt; return Nothing
            Just chan -&gt; fmap Just $ dupTChan chan
    case mchan of
        Nothing -&gt; notFound
        Just chan -&gt; respondSource typePlain $ do
            let loop = do
                    mtext &lt;- liftIO $ atomically $ readTChan chan
                    case mtext of
                        Nothing -&gt; return ()
                        Just text -&gt; do
                            sendChunkText text
                            sendFlush
                            loop
            loop</programlisting>
<simpara>We start off by looking up the channel in the map. If we can&#8217;t find it, it
means the job either never existed, or has already been completed. In either
event, we return a 404. (Another possible enhancement would be to store some
information on all previously completed jobs and let the user know if they&#8217;re
done.)</simpara>
<simpara>Assuming the channel exists, we use <literal>respondSource</literal> to start a streaming
response. We then repeatedly call <literal>readTChan</literal> until we get a <literal>Nothing</literal> value,
at which point we exit (via <literal>return ()</literal>). Notice that on each iteration, we
call both <literal>sendChunkText</literal> and <literal>sendFlush</literal>. Without that second call, the user
won&#8217;t receive any updates until the output buffer completely fills up, which is
not what we want for a real-time update system.</simpara>
</section>
<section id="single-process-pubsub_complete_application">
<title>Complete application</title>
<simpara>For completeness, here&#8217;s the full source code for this application:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import           Control.Concurrent     (forkIO, threadDelay)
import           Control.Concurrent.STM
import           Data.IntMap            (IntMap)
import qualified Data.IntMap            as IntMap
import           Data.Text              (Text)
import           Yesod

data App = App
    { jobs    :: TVar (IntMap (TChan (Maybe Text)))
    , nextJob :: TVar Int
    }

mkYesod "App" [parseRoutes|
/ HomeR GET POST
/view-progress/#Int ViewProgressR GET
|]

instance Yesod App

getHomeR :: Handler Html
getHomeR = defaultLayout $ do
    setTitle "PubSub example"
    [whamlet|
        &lt;form method=post&gt;
            &lt;button&gt;Start new background job
    |]

postHomeR :: Handler ()
postHomeR = do
    App {..} &lt;- getYesod
    (jobId, chan) &lt;- liftIO $ atomically $ do
        jobId &lt;- readTVar nextJob
        writeTVar nextJob $! jobId + 1
        chan &lt;- newBroadcastTChan
        m &lt;- readTVar jobs
        writeTVar jobs $ IntMap.insert jobId chan m
        return (jobId, chan)
    liftIO $ forkIO $ do
        threadDelay 1000000
        atomically $ writeTChan chan $ Just "Did something\n"
        threadDelay 1000000
        atomically $ writeTChan chan $ Just "Did something else\n"
        threadDelay 1000000
        atomically $ do
            writeTChan chan $ Just "All done\n"
            writeTChan chan Nothing
            m &lt;- readTVar jobs
            writeTVar jobs $ IntMap.delete jobId m
    redirect $ ViewProgressR jobId

getViewProgressR :: Int -&gt; Handler TypedContent
getViewProgressR jobId = do
    App {..} &lt;- getYesod
    mchan &lt;- liftIO $ atomically $ do
        m &lt;- readTVar jobs
        case IntMap.lookup jobId m of
            Nothing -&gt; return Nothing
            Just chan -&gt; fmap Just $ dupTChan chan
    case mchan of
        Nothing -&gt; notFound
        Just chan -&gt; respondSource typePlain $ do
            let loop = do
                    mtext &lt;- liftIO $ atomically $ readTChan chan
                    case mtext of
                        Nothing -&gt; return ()
                        Just text -&gt; do
                            sendChunkText text
                            sendFlush
                            loop
            loop

main :: IO ()
main = do
    jobs &lt;- newTVarIO IntMap.empty
    nextJob &lt;- newTVarIO 1
    warp 3000 App {..}</programlisting>
</section>
</section>
</article>
