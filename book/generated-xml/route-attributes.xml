<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="route-attributes_route_attributes">
<title>Route attributes</title>
<simpara>Route attributes allow you to set some metadata on each of your routes, in the
routes description itself. The syntax is trivial: just an exclamation point
followed by a value. Using it is also trivial: just use the <literal>routeAttrs</literal>
function.</simpara>
<simpara>It&#8217;s easiest to understand how it all fits together, and when you might want it, with a motivating example. The case I personally most use this for is annotating administrative routes. Imagine having a website with about 12 different admin actions. You <emphasis role="strong">could</emphasis> manually add a call to <literal>requireAdmin</literal> or some such at the beginning of each action, but:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
It&#8217;s tedious.
</simpara>
</listitem>
<listitem>
<simpara>
It&#8217;s error prone: you could easily forget one.
</simpara>
</listitem>
<listitem>
<simpara>
Worse yet, it&#8217;s not easy to notice that you&#8217;ve missed one.
</simpara>
</listitem>
</orderedlist>
<simpara>Modifying your <literal>isAuthorized</literal> method with an explicit list of administrative
routes is a bit better, but it&#8217;s still difficult to see at a glance when you&#8217;ve
missed one.</simpara>
<simpara>This is why I like to use route attributes for this: you add a single word to
each relevant part of the route definition, and then you just check for that
attribute in <literal>isAuthorized</literal>. Let&#8217;s see the code!</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Data.Set         (member)
import           Data.Text        (Text)
import           Yesod
import           Yesod.Auth
import           Yesod.Auth.Dummy

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
/unprotected UnprotectedR GET
/admin1 Admin1R GET !admin
/admin2 Admin2R GET !admin
/admin3 Admin3R GET
/auth AuthR Auth getAuth
|]

instance Yesod App where
    authRoute _ = Just $ AuthR LoginR
    isAuthorized route _writable
        | "admin" `member` routeAttrs route = do
            muser &lt;- maybeAuthId
            case muser of
                Nothing -&gt; return AuthenticationRequired
                Just ident
                    -- Just a hack since we're using the dummy module
                    | ident == "admin" -&gt; return Authorized
                    | otherwise -&gt; return $ Unauthorized "Admin access only"
        | otherwise = return Authorized

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

-- Hacky YesodAuth instance for just the dummy auth plugin
instance YesodAuth App where
    type AuthId App = Text

    loginDest _ = HomeR
    logoutDest _ = HomeR
    getAuthId = return . Just . credsIdent
    authPlugins _ = [authDummy]
    maybeAuthId = lookupSession credsKey
    authHttpManager = error "no http manager provided"

getHomeR :: Handler Html
getHomeR = defaultLayout $ do
    setTitle "Route attr homepage"
    [whamlet|
        &lt;p&gt;
            &lt;a href=@{UnprotectedR}&gt;Unprotected
        &lt;p&gt;
            &lt;a href=@{Admin1R}&gt;Admin 1
        &lt;p&gt;
            &lt;a href=@{Admin2R}&gt;Admin 2
        &lt;p&gt;
            &lt;a href=@{Admin3R}&gt;Admin 3
    |]

getUnprotectedR, getAdmin1R, getAdmin2R, getAdmin3R :: Handler Html
getUnprotectedR = defaultLayout [whamlet|Unprotected|]
getAdmin1R = defaultLayout [whamlet|Admin1|]
getAdmin2R = defaultLayout [whamlet|Admin2|]
getAdmin3R = defaultLayout [whamlet|Admin3|]

main :: IO ()
main = warp 3000 App</programlisting>
<simpara>And it was so glaring, I bet you even caught the security hole about <literal>Admin3R</literal>.</simpara>
<section id="route-attributes_alternative_approach_hierarchical_routes">
<title>Alternative approach: hierarchical routes</title>
<simpara>Another approach that can be used in some cases is <emphasis role="strong">hierarchical routes</emphasis>. This
allows you to group a number of related routes under a single parent. If you
want to keep all of your admin routes under a single URL structure (e.g.,
<literal>/admin</literal>), this can be a good solution. Using them is fairly simple. You need
to add a line to your routes declaration with a path, a name, and a colon,
e.g.:</simpara>
<programlisting language="routes" linenumbering="unnumbered">/admin AdminR:</programlisting>
<simpara>Then, you place all children routes beneath that line, and indented at least one space, e.g.:</simpara>
<programlisting language="routes" linenumbering="unnumbered">    /1 Admin1R GET
    /2 Admin2R GET
    /3 Admin3R GET</programlisting>
<simpara>To refer to these routes using type-safe URLs, you simply wrap them with the
<literal>AdminR</literal> constructor, e.g. <literal>AdminR Admin1R</literal>. Here is the previous route
attribute example rewritten to use hierarchical routes:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Data.Set         (member)
import           Data.Text        (Text)
import           Yesod
import           Yesod.Auth
import           Yesod.Auth.Dummy

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
/unprotected UnprotectedR GET
/admin AdminR:
    /1 Admin1R GET
    /2 Admin2R GET
    /3 Admin3R GET
/auth AuthR Auth getAuth
|]

instance Yesod App where
    authRoute _ = Just $ AuthR LoginR
    isAuthorized (AdminR _) _writable = do
        muser &lt;- maybeAuthId
        case muser of
            Nothing -&gt; return AuthenticationRequired
            Just ident
                -- Just a hack since we're using the dummy module
                | ident == "admin" -&gt; return Authorized
                | otherwise -&gt; return $ Unauthorized "Admin access only"
    isAuthorized _route _writable = return Authorized

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

-- Hacky YesodAuth instance for just the dummy auth plugin
instance YesodAuth App where
    type AuthId App = Text

    loginDest _ = HomeR
    logoutDest _ = HomeR
    getAuthId = return . Just . credsIdent
    authPlugins _ = [authDummy]
    maybeAuthId = lookupSession credsKey
    authHttpManager = error "no http manager provided"

getHomeR :: Handler Html
getHomeR = defaultLayout $ do
    setTitle "Route attr homepage"
    [whamlet|
        &lt;p&gt;
            &lt;a href=@{UnprotectedR}&gt;Unprotected
        &lt;p&gt;
            &lt;a href=@{AdminR Admin1R}&gt;Admin 1
        &lt;p&gt;
            &lt;a href=@{AdminR Admin2R}&gt;Admin 2
        &lt;p&gt;
            &lt;a href=@{AdminR Admin3R}&gt;Admin 3
    |]

getUnprotectedR, getAdmin1R, getAdmin2R, getAdmin3R :: Handler Html
getUnprotectedR = defaultLayout [whamlet|Unprotected|]
getAdmin1R = defaultLayout [whamlet|Admin1|]
getAdmin2R = defaultLayout [whamlet|Admin2|]
getAdmin3R = defaultLayout [whamlet|Admin3|]

main :: IO ()
main = warp 3000 App</programlisting>
</section>
<section id="route-attributes_hierarchical_routes_with_attributes">
<title>Hierarchical routes with attributes</title>
<simpara>Of course, you can mix the two approaches. Children of a hierarchical route will inherit the attributes of their parents, e.g.:</simpara>
<programlisting language="routes" linenumbering="unnumbered">/admin AdminR !admin:
    /1 Admin1R GET !1
    /2 Admin2R GET !2
    /3 Admin3R Get !3</programlisting>
<simpara><literal>AdminR Admin1R</literal> has the <literal>admin</literal> and <literal>1</literal> attributes.</simpara>
<simpara>With this technique, you can use the <literal>admin</literal> attributes in the <literal>isAuthorized</literal> function, like in the first example.
You are also sure that you won&#8217;t forget any attributes as we did with <literal>Admin3R</literal>.
Compared to the original code corresponding to the hierarchical route, this method has no real benefit : both methods being somehow equivalent.
We replaced the pattern matching on <literal>(AdminR _)</literal> with <literal>"admin" <literal>member</literal> routeAttrs route</literal>.
However, the benefit becomes more obvious when the admin pages are not all grouped under the same url structures but belong to different subtrees, e.g:</simpara>
<programlisting language="routes" linenumbering="unnumbered">/admin AdminR !admin:
    /1 Admin1R GET
    /2 Admin2R GET
    /3 Admin3R Get

/a AR !a:
  /1 A1R GET
  /2 A2R GET
  /admin AAdminR !admin:
    /1 AAdmin1R GET
    /2 AAdmin2R GET</programlisting>
<simpara>The pages under <literal>/admin</literal> and <literal>/a/admin</literal> have all the <literal>admin</literal> attribute and can be checked using <literal>"admin" <literal>member</literal> routeAttrs route</literal>. Pattern matching on <literal>(AdminR _)</literal> will not work for this example and only match <literal>/admin/*</literal> routes but not <literal>/a/admin/\*</literal></simpara>
</section>
</section>
</article>
