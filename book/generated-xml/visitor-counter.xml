<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="visitor-counter_visitor_counter">
<title>Visitor counter</title>
<simpara>Remember back in the good ol' days of the internet, where no website was
complete without a little "you are visitor number 32" thingy? Ahh, those were
the good times! Let&#8217;s recreate that wonderful experience in Yesod!</simpara>
<simpara>Now, if we wanted to do this properly, we&#8217;d store this information in some kind
of persistent storage layer, like a database, so that the information could be
shared across multiple horizontally-scaled web servers, and so that the
information would survive an app restart.</simpara>
<simpara>But our goal here isn&#8217;t to demonstrate good practice (after all, if it was
about good practice, I wouldn&#8217;t be demonstrating a visitor counter, right?).
Instead, this is meant to provide a simple example of sharing some state among
multiple handlers. A real-world use case would be caching information across
requests. Just remember that when you use the technique we&#8217;ll be showing, you
need to be careful about multiple app servers and app restarts.</simpara>
<simpara>The technique is simple: we create a new field in the foundation datatype for a
mutable reference to some data, and then access it in each handler. The
technique is so simple, it&#8217;s worth just diving into the code:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import           Data.IORef
import           Yesod

data App = App
    { visitors :: IORef Int
    }

mkYesod "App" [parseRoutes|
/ HomeR GET
|]

instance Yesod App

getHomeR :: Handler Html
getHomeR = do
    visitorsRef &lt;- fmap visitors getYesod
    visitors &lt;-
        liftIO $ atomicModifyIORef visitorsRef $ \i -&gt;
        (i + 1, i + 1)
    defaultLayout
        [whamlet|
            &lt;p&gt;Welcome, you are visitor number #{visitors}.
        |]

main :: IO ()
main = do
    visitorsRef &lt;- newIORef 0
    warp 3000 App
        { visitors = visitorsRef
        }</programlisting>
<simpara>I used <literal>IORef</literal> here, since we didn&#8217;t need anything more than it provided, but
you&#8217;re free to use <literal>MVar</literal>s or <literal>TVar</literal>s as well. In fact, a good exercise for
the reader is to modify the above program to store the visitor count in a
<literal>TVar</literal> instead.</simpara>
</section>
</article>
