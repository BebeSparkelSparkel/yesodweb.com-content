<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="I_chapter2_d1e408">
<title>Haskell</title>
<simpara>In order to use Yesod, you&#8217;re going to have to know at least the basics of
Haskell. Additionally, Yesod uses some features of Haskell that aren&#8217;t covered
in most introductory texts. While this book assumes the reader has a basic
familiarity with Haskell, this chapter is intended to fill in the gaps.</simpara>
<simpara>If you are already fluent in Haskell, feel free to completely skip this
chapter. Also, if you would prefer to start off by getting your feet wet with
Yesod, you can always come back to this chapter later as a reference.</simpara>
<simpara>If you are looking for a more thorough introduction to Haskell, I would
recommend either Real World Haskell or Learn You a Haskell.</simpara>
<section id="I_sect12_d1e423">
<title>Terminology</title>
<simpara>Even for those familiar with Haskell as a language, there can sometimes be some
confusion about terminology. Let&#8217;s establish some base terms that we can use
throughout this book.</simpara>
<variablelist>
<varlistentry>
<term>
Data type
</term>
<listitem>
<simpara>
This is one of the core building blocks for a strongly typed
language like Haskell. Some data types, like <literal>Int</literal>, can be treated as primitive
values, while other data types will build on top of these to create more
complicated values. For example, you might represent a person with:
</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data Person = Person Text Int</programlisting>
<simpara>Here, the <literal>Text</literal> would give the person&#8217;s name, and the <literal>Int</literal> would give the
person&#8217;s age. Due to its simplicity, this specific example type will recur
throughout the book. There are essentially three ways you can create a new data
type:</simpara>
<itemizedlist>
<listitem>
<simpara>
A <literal>type</literal> declaration such as <literal>type GearCount = Int</literal> merely creates a
  synonym for an existing type. The type system will do nothing to prevent
  you from using an <literal>Int</literal> where you asked for a <literal>GearCount</literal>. Using this can
  make your code more self-documenting.
</simpara>
</listitem>
<listitem>
<simpara>
A <literal>newtype</literal> declaration such as <literal>newtype Make = Make Text</literal>. In this case,
  you cannot accidentally use a <literal>Text</literal> in place of a <literal>Make</literal>; the compiler
  will stop you. The newtype wrapper always disappears during compilation,
  and will introduce no overhead.
</simpara>
</listitem>
<listitem>
<simpara>
A <literal>data</literal> declaration, such as <literal>Person</literal> above. You can also create
  Algebraic Data Types (ADTs), such as <literal>data Vehicle = Bicycle GearCount |
  Car Make Model</literal>.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Data constructor
</term>
<listitem>
<simpara>
In our examples above, <literal>Person</literal>, <literal>Make</literal>, <literal>Bicycle</literal>, and
<literal>Car</literal> are all data constructors.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Type constructor
</term>
<listitem>
<simpara>
In our examples above, <literal>Person</literal>, <literal>Make</literal>, and <literal>Vehicle</literal> are
all type constructors.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Type variables
</term>
<listitem>
<simpara>
Consider the data type <literal>data Maybe a = Just a | Nothing</literal>. In
this case, <literal>a</literal> is a type variable.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="I_sect12_d1e535">
<title>Tools</title>
<simpara>There are two main tools you&#8217;ll need to Haskell development. The Glasgow
Haskell Compiler (GHC) is the standard Haskell compiler, and the only one
officially supported by Yesod. You&#8217;ll also need Cabal, which is the standard
Haskell build tool. Not only do we use Cabal for building our local code, but
it can automatically download and install dependencies from Hackage, the
Haskell package repository.</simpara>
<simpara>The Yesod website keeps an up-to-date
<ulink url="http://www.yesodweb.com/page/quickstart">quick start guide</ulink> which includes
information on how to install and configure the various tools. It&#8217;s highly
recommended that you follow those instructions.</simpara>
<simpara>If you decide to install your tools yourself, please make sure to avoid these
common pitfalls:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Some Javascript tools that ship with Yesod require the build tools <literal>alex</literal> and <literal>happy</literal> to be installed. These can be added with <literal>cabal install alex happy</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Cabal installs executable to a user-specific directory, which needs to be added to your <literal>PATH</literal>. The exact location is OS-specific; please make sure to <ulink url="https://github.com/fpco/stackage/wiki/Preparing-your-system-to-use-Stackage#set-path-to-include-cabals-bin-directory">get the correct directory added</ulink>.
</simpara>
</listitem>
<listitem>
<simpara>
On Windows, it&#8217;s difficult to install the <literal>network</literal> package from source, as it requires a POSIX shell. Installing the <ulink url="http://hackage.haskell.org/platform/">Haskell Platform</ulink> avoids this issue.
</simpara>
</listitem>
<listitem>
<simpara>
On Mac OS X, there are multiple C preprocessors available: one from Clang, and one from GCC. Many Haskell libraries depend on the GCC preprocessor. Again, the Haskell Platform sets things up correctly.
</simpara>
</listitem>
<listitem>
<simpara>
Some Linux distributions- Ubuntu in particular- typically have outdated packages for GHC and Haskell Platform. These may no longer be supported by the current version of Yesod. Please check the quick start guide for minimum version requirements.
</simpara>
</listitem>
<listitem>
<simpara>
Make sure you have all necessary system libraries installed. This is usually handled automatically by Haskell Platform, but may require extra work on Linux distros. If you get error messages about missing libraries, you usually just need to <literal>apt-get install</literal> or <literal>yum install</literal> the relevant libraries.
</simpara>
</listitem>
</orderedlist>
<simpara>Once you have your toolchain set up correctly, you&#8217;ll need to install a number
of Haskell libraries. For the vast majority of the book, the following command
will install all the libraries you need:</simpara>
<programlisting language="shell" linenumbering="unnumbered">cabal update &amp;&amp; cabal install yesod yesod-bin persistent-sqlite yesod-static</programlisting>
<simpara>Again, please refer to the
<ulink url="http://www.yesodweb.com/page/quickstart">quick start guide</ulink> for the
most up to date and accurate information.</simpara>
</section>
<section id="I_sect12_d1e628">
<title>Language Pragmas</title>
<simpara>GHC will run by default in something very close to Haskell98 mode. It also
ships with a large number of language extensions, allowing more powerful type
classes, syntax changes, and more. There are multiple ways to tell GHC to turn
on these extensions. For most of the code snippets in this book, you&#8217;ll see
language pragmas, which look like this:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MyLanguageExtension #-}</programlisting>
<simpara>These should always appear at the top of your source file. Additionally, there
are two other common approaches:</simpara>
<itemizedlist>
<listitem>
<simpara>
On the GHC command line, pass an extra argument <literal>-XMyLanguageExtension</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
In your <literal>cabal</literal> file, add an <literal>extensions</literal> block.
</simpara>
</listitem>
</itemizedlist>
<simpara>I personally never use the GHC command line argument approach. It&#8217;s a personal
preference, but I like to have my settings clearly stated in a file. In general
it&#8217;s recommended to avoid putting extensions in your <literal>cabal</literal> file; however, in
the Yesod scaffolded site we specifically use this approach to avoid the
boilerplate of specifying the same language pragmas in every source file.</simpara>
<simpara>We&#8217;ll end up using quite a few language extensions in this book (the
scaffolding uses 11). We will not cover the meaning of all of them. Instead,
please see the
<ulink url="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghc-language-features.html">GHC
documentation</ulink>.</simpara>
</section>
<section id="I_sect12_d1e671">
<title>Overloaded Strings</title>
<simpara>What&#8217;s the type of <literal>"hello"</literal>? Traditionally, it&#8217;s <literal>String</literal>, which is defined as
<literal>type String = [Char]</literal>. Unfortunately, there are a number of limitations with
this:</simpara>
<itemizedlist>
<listitem>
<simpara>
It&#8217;s a very inefficient implementation of textual data. We need to allocate
  extra memory for each cons cell, plus the characters themselves each take up
  a full machine word.
</simpara>
</listitem>
<listitem>
<simpara>
Sometimes we have string-like data that&#8217;s not actually text, such as
  <literal>ByteString</literal>s and HTML.
</simpara>
</listitem>
</itemizedlist>
<simpara>To work around these limitations, GHC has a language extension called
<literal>OverloadedStrings</literal>. When enabled, literal strings no longer have the
monomorphic type <literal>String</literal>; instead, they have the type <literal>IsString a &#8658; a</literal>,
where <literal>IsString</literal> is defined as:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">class IsString a where
    fromString :: String -&gt; a</programlisting>
<simpara>There are <literal>IsString</literal> instances available for a number of types in Haskell, such
as <literal>Text</literal> (a much more efficient packed <literal>String</literal> type), <literal>ByteString</literal>, and
<literal>Html</literal>. Virtually every example in this book will assume that this language
extension is turned on.</simpara>
<simpara>Unfortunately, there is one drawback to this extension: it can sometimes
confuse GHC&#8217;s type checker. Imagine we have:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings, TypeSynonymInstances, FlexibleInstances #-}
import Data.Text (Text)

class DoSomething a where
    something :: a -&gt; IO ()

instance DoSomething String where
    something _ = putStrLn "String"

instance DoSomething Text where
    something _ = putStrLn "Text"

myFunc :: IO ()
myFunc = something "hello"</programlisting>
<simpara>Will the program print out <literal>String</literal> or <literal>Text</literal>? It&#8217;s not clear. So instead,
you&#8217;ll need to give an explicit type annotation to specify whether <literal>"hello"</literal>
should be treated as a <literal>String</literal> or <literal>Text</literal>.</simpara>
</section>
<section id="I_sect12_d1e753">
<title>Type Families</title>
<simpara>The basic idea of a type family is to state some association between two
different types. Suppose we want to write a function that will safely take the
first element of a list. But we don&#8217;t want it to work just on lists; we&#8217;d like
it to treat a <literal>ByteString</literal> like a list of <literal>Word8</literal>s. To do so, we need to
introduce some associated type to specify what the contents of a certain type
are.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE TypeFamilies, OverloadedStrings #-}
import Data.Word (Word8)
import qualified Data.ByteString as S
import Data.ByteString.Char8 () -- get an orphan IsString instance

class SafeHead a where
    type Content a
    safeHead :: a -&gt; Maybe (Content a)

instance SafeHead [a] where
    type Content [a] = a
    safeHead [] = Nothing
    safeHead (x:_) = Just x

instance SafeHead S.ByteString where
    type Content S.ByteString = Word8
    safeHead bs
        | S.null bs = Nothing
        | otherwise = Just $ S.head bs

main :: IO ()
main = do
    print $ safeHead ("" :: String)
    print $ safeHead ("hello" :: String)

    print $ safeHead ("" :: S.ByteString)
    print $ safeHead ("hello" :: S.ByteString)</programlisting>
<simpara>The new syntax is the ability to place a <literal>type</literal> inside of a <literal>class</literal> and
<literal>instance</literal>. We can also use <literal>data</literal> instead, which will create a new datatype
instead of reference an existing one.</simpara>
<note><simpara>There are other ways to use associated types outside the context of a typeclass. However, in Yesod, all of our associated types are in fact part of a type class. For more information on type families, see <ulink url="http://www.haskell.org/haskellwiki/GHC/Type_families">the Haskell wiki page</ulink>.</simpara></note>
</section>
<section id="I_sect12_d1e789">
<title>Template Haskell</title>
<simpara>Template Haskell (TH) is an approach to <emphasis>code generation</emphasis>. We use it in Yesod
in a number of places to reduce boilerplate, and to ensure that the generated
code is correct. Template Haskell is essentially Haskell which generates a
Haskell Abstract Syntax Tree (AST).</simpara>
<note><simpara>There&#8217;s actually more power in TH than that, as it can actually
introspect code. We don&#8217;t use these facilities in Yesod, however.</simpara></note>
<simpara>Writing TH code can be tricky, and unfortunately there isn&#8217;t very much type
safety involved. You can easily write TH that will generate code that won&#8217;t
compile. This is only an issue for the developers of Yesod, not for its users.
During development, we use a large collection of unit tests to ensure that the
generated code is correct. As a user, all you need to do is call these already
existing functions. For example, to include an externally defined Hamlet
template, you can write:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">$(hamletFile "myfile.hamlet")</programlisting>
<simpara>(Hamlet is discussed in the Shakespeare chapter.) The dollar sign immediately
followed by parentheses tell GHC that what follows is a Template Haskell
function. The code inside is then run by the compiler and generates a Haskell
AST, which is then compiled. And yes, it&#8217;s even possible to
<ulink url="http://www.yesodweb.com/blog/2010/09/yo-dawg-template-haskell">go meta
with this</ulink>.</simpara>
<simpara>A nice trick is that TH code is allowed to perform arbitrary <literal>IO</literal> actions, and
therefore we can place some input in external files and have it parsed at
compile time. One example usage is to have compile-time checked HTML, CSS, and
Javascript templates.</simpara>
<simpara>If your Template Haskell code is being used to generate declarations, and is
being placed at the top level of our file, we can leave off the dollar sign and
parentheses. In other words:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE TemplateHaskell #-}

-- Normal function declaration, nothing special
myFunction = ...

-- Include some TH code
$(myThCode)

-- Or equivalently
myThCode</programlisting>
<simpara>It can be useful to see what code is being generated by Template Haskell for
you. To do so, you should use the <literal>-ddump-splices</literal> GHC option.</simpara>
<note><simpara>There are many other features of Template Haskell not covered here. For
more information, see the
<ulink url="http://www.haskell.org/haskellwiki/Template_Haskell">Haskell wiki page</ulink>.</simpara></note>
<simpara>One final note: Template Haskell introduces something called the stage
restriction, which essentially means that code before a Template Haskell splice
cannot refer to code in the Template Haskell, or what follows. This will
sometimes require you to rearrange your code a bit. The same restriction
applies to QuasiQuotes.</simpara>
</section>
<section id="I_sect12_d1e833">
<title>QuasiQuotes</title>
<simpara>QuasiQuotes (QQ) are a minor extension of Template Haskell that let us embed
arbitrary content within our Haskell source files. For example, we mentioned
previously the <literal>hamletFile</literal> TH function, which reads the template contents from
an external file. We also have a quasi-quoter named <literal>hamlet</literal> that takes the
content inline:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes #-}

[hamlet|&lt;p&gt;This is quasi-quoted Hamlet.|]</programlisting>
<simpara>The syntax is set off using square brackets and pipes. The name of the
quasi-quoter is given between the opening bracket and the first pipe, and the
content is given between the pipes.</simpara>
<simpara>Throughout the book, we will often times use the QQ-approach over a TH-powered
external file since the former is simpler to copy-and-paste. However, in
production, external files are recommended for all but the shortest of inputs
as it gives a nice separation of the non-Haskell syntax from your Haskell code.</simpara>
</section>
<section id="I_sect12_d1e851">
<title>API Documentation</title>
<simpara>The standard API documentation program in Haskell is called Haddock. The
standard Haddock search tool is called Hoogle. My recommendation is to use
<ulink url="https://www.fpcomplete.com/hoogle">FP Complete&#8217;s Hoogle search</ulink> and its
accompanying Haddocks for searching and browsing documentation. The reason for
this is that the FP Complete Hoogle database covers a very large number of open
source Haskell packages, and the documentation provided is always fully
generated and known to link to other working Haddocks.</simpara>
<simpara>The more commonly used sources for these are
<ulink url="http://hackage.haskell.org/">Hackage</ulink> itself, and
<ulink url="http://www.haskell.org/hoogle">haskell.org&#8217;s Hoogle instance</ulink>. The
downsides to these are that- based on build issues on the server- documentation
is sometimes not generated, and the Hoogle search defaults to searching only a
subset of available packages. Most importantly for us, Yesod is indexed by FP
Complete&#8217;s Hoogle, but not by haskell.org&#8217;s.</simpara>
<simpara>If when reading this book you run into types or functions that you do not
understand, try doing a Hoogle search with FP Complete&#8217;s Hoogle to get more
information.</simpara>
</section>
<section id="haskell_summary">
<title>Summary</title>
<simpara>You don&#8217;t need to be an expert in Haskell to use Yesod, a basic familiarity
will suffice. This chapter hopefully gave you just enough extra information to
feel more comfortable following the rest of the book.</simpara>
</section>
</section>
</article>
