<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="case-study-sphinx_case_study_sphinx_based_search">
<title>Case Study: Sphinx-based Search</title>
<simpara><ulink url="http://sphinxsearch.com/">Sphinx</ulink> is a search server, and powers the
search feature on many sites. While the actual code necessary to integrate
Yesod with Sphinx is relatively short, it touches on a number of complicated
topics, and is therefore a great case study in how to play with some of the
under-the-surface details of Yesod.</simpara>
<simpara>There are essentially three different pieces at play here:</simpara>
<itemizedlist>
<listitem>
<simpara>
Storing the content we wish to search. This is fairly straight-forward
  Persistent code, and we won&#8217;t dwell on it much in this chapter.
</simpara>
</listitem>
<listitem>
<simpara>
Accessing Sphinx search results from inside Yesod. Thanks to the sphinx
  package, this is actually very easy.
</simpara>
</listitem>
<listitem>
<simpara>
Providing the document content to Sphinx. This is where the interesting stuff
  happens, and will show how to deal with streaming content from a database
  directly to XML, which gets sent directly over the wire to the client.
</simpara>
</listitem>
</itemizedlist>
<simpara>The full code for this example can be
<ulink url="https://www.fpcomplete.com/user/snoyberg/yesod/case-study-sphinx">found
on FP Haskell Center</ulink>.</simpara>
<section id="case-study-sphinx_sphinx_setup">
<title>Sphinx Setup</title>
<simpara>Unlike many of our other examples, to start with here we&#8217;ll need to actually
configure and run our external Sphinx server. I&#8217;m not going to go into all the
details of Sphinx, partly because it&#8217;s not relevant to our point here, and
mostly because I&#8217;m not an expert on Sphinx.</simpara>
<simpara>Sphinx provides three main command line utilities: <literal>searchd</literal> is the actual
search daemon that receives requests from the client (in this case, our web
app) and returns the search results. <literal>indexer</literal> parses the set of documents and
creates the search index. <literal>search</literal> is a debugging utility that will run simple
queries against Sphinx.</simpara>
<simpara>There are two important settings: the source and the index. The source tells
Sphinx where to read document information from. It has direct support for MySQL
and PostgreSQL, as well as a more general XML format known as xmlpipe2. We&#8217;re
going to use the last one. This not only will give us more flexibility with
choosing Persistent backends, but will also demonstrate some more powerful
Yesod concepts.</simpara>
<simpara>The second setting is the index. Sphinx can handle multiple indices
simultaneously, which allows it to provide search for multiple services at
once. Each index will have a source it pulls from.</simpara>
<simpara>In our case, we&#8217;re going to provide a URL from our application
(/search/xmlpipe) that provides the XML file required by Sphinx, and then pipe
that through to the indexer. So we&#8217;ll add the following to our Sphinx config
file:</simpara>
<programlisting language="sphinxconf" linenumbering="unnumbered">source searcher_src
{
        type = xmlpipe2
        xmlpipe_command = curl http://localhost:3000/search/xmlpipe
}

index searcher
{
        source = searcher_src
        path = /var/data/searcher
        docinfo = extern
        charset_type = utf-8
}

searchd
{
        listen                  = 9312
        pid_file                = /var/run/sphinxsearch/searchd.pid
}</programlisting>
<simpara>In order to build your search index, you would run <literal>indexer searcher</literal>.
Obviously this won&#8217;t work until you have your web app running. For a production
site, it would make sense to run this command via a crontab script so the index
is regularly updated.</simpara>
</section>
<section id="case-study-sphinx_basic_yesod_setup">
<title>Basic Yesod Setup</title>
<simpara>Let&#8217;s get our basic Yesod setup going. We&#8217;re going to have a single table in
the database for holding documents, which consist of a title and content. We&#8217;ll
store this in a SQLite database, and provide routes for searching, adding
documents, viewing documents and providing the xmlpipe file to Sphinx.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Doc
    title Text
    content Textarea
|]

data Searcher = Searcher
    { connPool :: ConnectionPool
    }

mkYesod "Searcher" [parseRoutes|
/ HomeR GET
/doc/#DocId DocR GET
/add-doc AddDocR POST
/search SearchR GET
/search/xmlpipe XmlpipeR GET
|]

instance Yesod Searcher

instance YesodPersist Searcher where
    type YesodPersistBackend Searcher = SqlPersistT

    runDB action = do
        Searcher pool &lt;- getYesod
        runSqlPool action pool

instance YesodPersistRunner Searcher where -- see below
    getDBRunner = defaultGetDBRunner connPool

instance RenderMessage Searcher FormMessage where
    renderMessage _ _ = defaultFormMessage</programlisting>
<simpara>Hopefully all of this looks pretty familiar by now. The one new thing we&#8217;ve
defined here is an instance of <literal>YesodPersistRunner</literal>. This is a typeclass
necessary for creating streaming database responses. The default implementation
(<literal>defaultGetDBRunner</literal>) is almost always appropriate.</simpara>
<simpara>Next we&#8217;ll define some forms: one for creating documents, and one for searching:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">addDocForm :: Html -&gt; MForm Handler (FormResult Doc, Widget)
addDocForm = renderTable $ Doc
    &lt;$&gt; areq textField "Title" Nothing
    &lt;*&gt; areq textareaField "Contents" Nothing

searchForm :: Html -&gt; MForm Handler (FormResult Text, Widget)
searchForm = renderDivs $ areq (searchField True) "Query" Nothing</programlisting>
<simpara>The <literal>True</literal> parameter to searchField makes the field auto-focus on page load.
Finally, we have some standard handlers for the homepage (shows the add
document form and the search form), the document display, and adding a
document.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getHomeR :: Handler Html
getHomeR = do
    docCount &lt;- runDB $ count ([] :: [Filter Doc])
    ((_, docWidget), _) &lt;- runFormPost addDocForm
    ((_, searchWidget), _) &lt;- runFormGet searchForm
    let docs = if docCount == 1
                then "There is currently 1 document."
                else "There are currently " ++ show docCount ++ " documents."
    defaultLayout
        [whamlet|
            &lt;p&gt;Welcome to the search application. #{docs}
            &lt;form method=post action=@{AddDocR}&gt;
                &lt;table&gt;
                    ^{docWidget}
                    &lt;tr&gt;
                        &lt;td colspan=3&gt;
                            &lt;input type=submit value="Add document"&gt;
            &lt;form method=get action=@{SearchR}&gt;
                ^{searchWidget}
                &lt;input type=submit value=Search&gt;
        |]

postAddDocR :: Handler Html
postAddDocR = do
    ((res, docWidget), _) &lt;- runFormPost addDocForm
    case res of
        FormSuccess doc -&gt; do
            docid &lt;- runDB $ insert doc
            setMessage "Document added"
            redirect $ DocR docid
        _ -&gt; defaultLayout
            [whamlet|
                &lt;form method=post action=@{AddDocR}&gt;
                    &lt;table&gt;
                        ^{docWidget}
                        &lt;tr&gt;
                            &lt;td colspan=3&gt;
                                &lt;input type=submit value="Add document"&gt;
            |]

getDocR :: DocId -&gt; Handler Html
getDocR docid = do
    doc &lt;- runDB $ get404 docid
    defaultLayout
        [whamlet|
            &lt;h1&gt;#{docTitle doc}
            &lt;div .content&gt;#{docContent doc}
        |]</programlisting>
</section>
<section id="case-study-sphinx_searching">
<title>Searching</title>
<simpara>Now that we&#8217;ve got the boring stuff out of the way, let&#8217;s jump into the actual
searching. We&#8217;re going to need three pieces of information for displaying a
result: the document ID it comes from, the title of that document, and the
excerpts. Excerpts are the highlighted portions of the document which contain
the search term.</simpara>
<figure id="searching-x-5"><title>Search Result</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/search-results.png"/>
  </imageobject>
  <textobject><phrase>images/search-results.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>So let&#8217;s start off by defining a Result datatype:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data Result = Result
    { resultId      :: DocId
    , resultTitle   :: Text
    , resultExcerpt :: Html
    }</programlisting>
<simpara>Next we&#8217;ll look at the search handler:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getSearchR :: Handler Html
getSearchR = do
    ((formRes, searchWidget), _) &lt;- runFormGet searchForm
    searchResults &lt;-
        case formRes of
            FormSuccess qstring -&gt; getResults qstring
            _ -&gt; return []
    defaultLayout $ do
        toWidget
            [lucius|
                .excerpt {
                    color: green; font-style: italic
                }
                .match {
                    background-color: yellow;
                }
            |]
        [whamlet|
            &lt;form method=get action=@{SearchR}&gt;
                ^{searchWidget}
                &lt;input type=submit value=Search&gt;
            $if not $ null searchResults
                &lt;h1&gt;Results
                $forall result &lt;- searchResults
                    &lt;div .result&gt;
                        &lt;a href=@{DocR $ resultId result}&gt;#{resultTitle result}
                        &lt;div .excerpt&gt;#{resultExcerpt result}
        |]</programlisting>
<simpara>Nothing magical here, we&#8217;re just relying on the <literal>searchForm</literal> defined above, and
the <literal>getResults</literal> function which hasn&#8217;t been defined yet. This function just
takes a search string, and returns a list of results. This is where we first
interact with the Sphinx API. We&#8217;ll be using two functions: <literal>query</literal> will return
a list of matches, and <literal>buildExcerpts</literal> will return the highlighted excerpts.
Let&#8217;s first look at <literal>getResults</literal>:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getResults :: Text -&gt; Handler [Result]
getResults qstring = do
    sphinxRes' &lt;- liftIO $ S.query config "searcher" $ T.unpack qstring
    case sphinxRes' of
        ST.Ok sphinxRes -&gt; do
            let docids = map (Key . PersistInt64 . ST.documentId) $ ST.matches sphinxRes
            fmap catMaybes $ runDB $ forM docids $ \docid -&gt; do
                mdoc &lt;- get docid
                case mdoc of
                    Nothing -&gt; return Nothing
                    Just doc -&gt; liftIO $ Just &lt;$&gt; getResult docid doc qstring
        _ -&gt; error $ show sphinxRes'
  where
    config = S.defaultConfig
        { S.port = 9312
        , S.mode = ST.Any
        }</programlisting>
<simpara><literal>query</literal> takes three parameters: the configuration options, the index to search
against (searcher in this case) and the search string. It returns a list of
document IDs that contain the search string. The tricky bit here is that those
documents are returned as <literal>Int64</literal> values, whereas we need <literal>DocId</literal>s. We&#8217;re
taking advantage of the fact that the SQL Persistent backends use a
<literal>PersistInt64</literal> constructor for their IDs, and simply wrap up the values
appropriately.</simpara>
<note><simpara>If you&#8217;re dealing with a backend that has non-numeric IDs, like MongoDB,
you&#8217;ll need to work out something a bit more clever than this.</simpara></note>
<simpara>We then loop over the resulting IDs to get a <literal>[Maybe Result]</literal> value, and use
<literal>catMaybes</literal> to turn it into a <literal>[Result]</literal>. In the where clause, we define our
local settings, which override the default port and set up the search to work
when <emphasis>any</emphasis> term matches the document.</simpara>
<simpara>Let&#8217;s finally look at the <literal>getResult</literal> function:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getResult :: DocId -&gt; Doc -&gt; Text -&gt; IO Result
getResult docid doc qstring = do
    excerpt' &lt;- S.buildExcerpts
        excerptConfig
        [T.unpack $ escape $ docContent doc]
        "searcher"
        (T.unpack qstring)
    let excerpt =
            case excerpt' of
                ST.Ok bss -&gt; preEscapedToHtml $ decodeUtf8 $ mconcat bss
                _ -&gt; ""
    return Result
        { resultId = docid
        , resultTitle = docTitle doc
        , resultExcerpt = excerpt
        }
  where
    excerptConfig = E.altConfig { E.port = 9312 }

escape :: Textarea -&gt; Text
escape =
    T.concatMap escapeChar . unTextarea
  where
    escapeChar '&lt;' = "&amp;lt;"
    escapeChar '&gt;' = "&amp;gt;"
    escapeChar '&amp;' = "&amp;amp;"
    escapeChar c   = T.singleton c</programlisting>
<simpara><literal>buildExcerpts</literal> takes four parameters: the configuration options, the textual
contents of the document, the search index and the search term. The interesting
bit is that we entity escape the text content. Sphinx won&#8217;t automatically
escape these for us, so we must do it explicitly.</simpara>
<simpara>Similarly, the result from Sphinx is a list of <literal>Text</literal>s. But of course, we&#8217;d
rather have Html. So we concat that list into a single <literal>Text</literal> and use
preEscapedToHtml to make sure that the tags inserted for matches are not
escaped. A sample of this HTML is:</simpara>
<programlisting language="html" linenumbering="unnumbered">&amp;#8230; Departments.  The President shall have &lt;span class='match'&gt;Power&lt;/span&gt; to fill up all Vacancies
&amp;#8230;  people. Amendment 11 The Judicial &lt;span class='match'&gt;power&lt;/span&gt; of the United States shall
&amp;#8230; jurisdiction. 2. Congress shall have &lt;span class='match'&gt;power&lt;/span&gt; to enforce this article by
&amp;#8230; 5. The Congress shall have &lt;span class='match'&gt;power&lt;/span&gt; to enforce, by appropriate legislation
&amp;#8230;</programlisting>
</section>
<section id="case-study-sphinx_streaming_xmlpipe_output">
<title>Streaming xmlpipe output</title>
<simpara>We&#8217;ve saved the best for last. For the majority of Yesod handlers, the
recommended approach is to load up the database results into memory and then
produce the output document based on that. It&#8217;s simpler to work with, but more
importantly it&#8217;s more resilient to exceptions. If there&#8217;s a problem loading the
data from the database, the user will get a proper 500 response code.</simpara>
<note><simpara>What do I mean by "proper 500 response code?" If you start streaming a
response to a client, and encounter an exception halfway through, there&#8217;s no
way to change the status code; the user will see a 200 response that simply
stops in the middle. Not only can this partial content be confusing, but it&#8217;s
an invalid usage of the HTTP spec.</simpara></note>
<simpara>However, generating the xmlpipe output is a perfect example of the alternative.
There are potentially a huge number of documents, and documents could easily be
several hundred kilobytes. If we take a non-streaming approach, this can lead
to huge memory usage and slow response times.</simpara>
<simpara>So how exactly do we create a streaming response? Yesod provides a helper
function for this case: <literal>responseSourceDB</literal>. This function takes two arguments:
a content type, and a conduit <literal>Source</literal> providing a stream of blaze-builder
<literal>Builder</literal>s. Yesod that handles all of the issues of grabbing a database
connection from the connection pool, starting a transaction, and streaming the
response to the user.</simpara>
<simpara>Now we know we want to create a stream of <literal>Builder</literal>s from some XML content.
Fortunately, the xml-conduit package provides this interface directly.
<literal>xml-conduit</literal> provides some high-level interfaces for dealing with documents as
a whole, but in our case, we&#8217;re going to need to use the low-level <literal>Event</literal>
interface to ensure minimal memory impact. So the function we&#8217;re interested in
is:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">renderBuilder :: Monad m =&gt; RenderSettings -&gt; Conduit Event m Builder</programlisting>
<simpara>In plain English, that means <literal>renderBuilder</literal> takes some settings (we&#8217;ll just use
the defaults), and will then convert a stream of <literal>Event</literal>s to a stream of
<literal>Builder</literal>s. This is looking pretty good, all we need now is a stream of
<literal>Event</literal>s.</simpara>
<simpara>Speaking of which, what should our XML document actually look like? It&#8217;s pretty
simple, we have a <literal>sphinx:docset</literal> root element, a <literal>sphinx:schema</literal> element
containing a single <literal>sphinx:field</literal> (which defines the content field), and then
a <literal>sphinx:document</literal> for each document in our database. That last element will
have an <literal>id</literal> attribute and a child <literal>content</literal> element. Below is an example of
such a document:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;sphinx:docset xmlns:sphinx="http://sphinxsearch.com/"&gt;
    &lt;sphinx:schema&gt;
        &lt;sphinx:field name="content"/&gt;
    &lt;/sphinx:schema&gt;
    &lt;sphinx:document id="1"&gt;
        &lt;content&gt;bar&lt;/content&gt;
    &lt;/sphinx:document&gt;
    &lt;sphinx:document id="2"&gt;
        &lt;content&gt;foo bar baz&lt;/content&gt;
    &lt;/sphinx:document&gt;
&lt;/sphinx:docset&gt;</programlisting>
<simpara>Every document is going to start off with the same events (start the docset,
start the schema, etc) and end with the same event (end the docset). We&#8217;ll
start off by defining those:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">toName :: Text -&gt; X.Name
toName x = X.Name x (Just "http://sphinxsearch.com/") (Just "sphinx")

docset, schema, field, document, content :: X.Name
docset = toName "docset"
schema = toName "schema"
field = toName "field"
document = toName "document"
content = "content" -- no prefix

startEvents, endEvents :: [X.Event]
startEvents =
    [ X.EventBeginDocument
    , X.EventBeginElement docset []
    , X.EventBeginElement schema []
    , X.EventBeginElement field [("name", [X.ContentText "content"])]
    , X.EventEndElement field
    , X.EventEndElement schema
    ]

endEvents =
    [ X.EventEndElement docset
    ]</programlisting>
<simpara>Now that we have the shell of our document, we need to get the <literal>Event</literal>s for
each individual document. This is actually a fairly simple function:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">entityToEvents :: (Entity Doc) -&gt; [X.Event]
entityToEvents (Entity docid doc) =
    [ X.EventBeginElement document [("id", [X.ContentText $ toPathPiece docid])]
    , X.EventBeginElement content []
    , X.EventContent $ X.ContentText $ unTextarea $ docContent doc
    , X.EventEndElement content
    , X.EventEndElement document
    ]</programlisting>
<simpara>We start the document element with an <literal>id</literal> attribute, start the content, insert
the content, and then close both elements. We use <literal>toPathPiece</literal> to convert a
<literal>DocId</literal> into a <literal>Text</literal> value. Next, we need to be able to convert a stream of
these entities into a stream of events. For this, we can use the built-in
<literal>concatMap</literal> function from <literal>Data.Conduit.List</literal>: <literal>CL.concatMap entityToEvents</literal>.</simpara>
<simpara>But what we <emphasis>really</emphasis> want is to stream those events directly from the database.
For most of this book, we&#8217;ve used the <literal>selectList</literal> function, but Persistent
also provides the (more powerful) <literal>selectSource</literal> function. So we end up with
the function:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">docSource :: Source (YesodDB Searcher) X.Event
docSource = selectSource [] [] $= CL.concatMap entityToEvents</programlisting>
<simpara>The $= operator joins together a source and a conduit into a new source. Now
that we have our <literal>Event</literal> source, all we need to do is surround it with the
document start and end events. With <literal>Source</literal>'s <literal>Monad</literal> instance, this is a
piece of cake:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">fullDocSource :: Source (YesodDB Searcher) X.Event
fullDocSource = do
    mapM_ yield startEvents
    docSource
    mapM_ yield endEvents</programlisting>
<simpara>Now we need to tie it together in <literal>getXmlpipeR</literal>. To do so, we&#8217;ll use the <literal>respondSourceDB</literal> function mentioned earlier. The last trick we need to do is convert our stream of <literal>Event</literal>s into a stream of <literal>Chunk Builder</literal>s. Converting to a stream of <literal>Builder</literal>s is achieved with <literal>renderBuilder</literal>, and finally we&#8217;ll just wrap each <literal>Builder</literal> in its own <literal>Chunk</literal>:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getXmlpipeR :: Handler TypedContent
getXmlpipeR =
    respondSourceDB "text/xml"
 $  fullDocSource
 $= renderBuilder def
 $= CL.map Chunk</programlisting>
</section>
<section id="case-study-sphinx_full_code">
<title>Full code</title>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE FlexibleContexts      #-}
{-# LANGUAGE GADTs                 #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Control.Applicative                     ((&lt;$&gt;), (&lt;*&gt;))
import           Control.Monad                           (forM)
import           Control.Monad.Logger                    (runStdoutLoggingT)
import           Data.Conduit
import qualified Data.Conduit.List                       as CL
import           Data.Maybe                              (catMaybes)
import           Data.Monoid                             (mconcat)
import           Data.Text                               (Text)
import qualified Data.Text                               as T
import           Data.Text.Lazy.Encoding                 (decodeUtf8)
import qualified Data.XML.Types                          as X
import           Database.Persist.Sqlite
import           Text.Blaze.Html                         (preEscapedToHtml)
import qualified Text.Search.Sphinx                      as S
import qualified Text.Search.Sphinx.ExcerptConfiguration as E
import qualified Text.Search.Sphinx.Types                as ST
import           Text.XML.Stream.Render                  (def, renderBuilder)
import           Yesod

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Doc
    title Text
    content Textarea
|]

data Searcher = Searcher
    { connPool :: ConnectionPool
    }

mkYesod "Searcher" [parseRoutes|
/ HomeR GET
/doc/#DocId DocR GET
/add-doc AddDocR POST
/search SearchR GET
/search/xmlpipe XmlpipeR GET
|]

instance Yesod Searcher

instance YesodPersist Searcher where
    type YesodPersistBackend Searcher = SqlPersistT

    runDB action = do
        Searcher pool &lt;- getYesod
        runSqlPool action pool

instance YesodPersistRunner Searcher where
    getDBRunner = defaultGetDBRunner connPool

instance RenderMessage Searcher FormMessage where
    renderMessage _ _ = defaultFormMessage

addDocForm :: Html -&gt; MForm Handler (FormResult Doc, Widget)
addDocForm = renderTable $ Doc
    &lt;$&gt; areq textField "Title" Nothing
    &lt;*&gt; areq textareaField "Contents" Nothing

searchForm :: Html -&gt; MForm Handler (FormResult Text, Widget)
searchForm = renderDivs $ areq (searchField True) "Query" Nothing

getHomeR :: Handler Html
getHomeR = do
    docCount &lt;- runDB $ count ([] :: [Filter Doc])
    ((_, docWidget), _) &lt;- runFormPost addDocForm
    ((_, searchWidget), _) &lt;- runFormGet searchForm
    let docs = if docCount == 1
                then "There is currently 1 document."
                else "There are currently " ++ show docCount ++ " documents."
    defaultLayout
        [whamlet|
            &lt;p&gt;Welcome to the search application. #{docs}
            &lt;form method=post action=@{AddDocR}&gt;
                &lt;table&gt;
                    ^{docWidget}
                    &lt;tr&gt;
                        &lt;td colspan=3&gt;
                            &lt;input type=submit value="Add document"&gt;
            &lt;form method=get action=@{SearchR}&gt;
                ^{searchWidget}
                &lt;input type=submit value=Search&gt;
        |]

postAddDocR :: Handler Html
postAddDocR = do
    ((res, docWidget), _) &lt;- runFormPost addDocForm
    case res of
        FormSuccess doc -&gt; do
            docid &lt;- runDB $ insert doc
            setMessage "Document added"
            redirect $ DocR docid
        _ -&gt; defaultLayout
            [whamlet|
                &lt;form method=post action=@{AddDocR}&gt;
                    &lt;table&gt;
                        ^{docWidget}
                        &lt;tr&gt;
                            &lt;td colspan=3&gt;
                                &lt;input type=submit value="Add document"&gt;
            |]

getDocR :: DocId -&gt; Handler Html
getDocR docid = do
    doc &lt;- runDB $ get404 docid
    defaultLayout
        [whamlet|
            &lt;h1&gt;#{docTitle doc}
            &lt;div .content&gt;#{docContent doc}
        |]

data Result = Result
    { resultId      :: DocId
    , resultTitle   :: Text
    , resultExcerpt :: Html
    }

getResult :: DocId -&gt; Doc -&gt; Text -&gt; IO Result
getResult docid doc qstring = do
    excerpt' &lt;- S.buildExcerpts
        excerptConfig
        [T.unpack $ escape $ docContent doc]
        "searcher"
        (T.unpack qstring)
    let excerpt =
            case excerpt' of
                ST.Ok bss -&gt; preEscapedToHtml $ decodeUtf8 $ mconcat bss
                _ -&gt; ""
    return Result
        { resultId = docid
        , resultTitle = docTitle doc
        , resultExcerpt = excerpt
        }
  where
    excerptConfig = E.altConfig { E.port = 9312 }

escape :: Textarea -&gt; Text
escape =
    T.concatMap escapeChar . unTextarea
  where
    escapeChar '&lt;' = "&amp;lt;"
    escapeChar '&gt;' = "&amp;gt;"
    escapeChar '&amp;' = "&amp;amp;"
    escapeChar c   = T.singleton c

getResults :: Text -&gt; Handler [Result]
getResults qstring = do
    sphinxRes' &lt;- liftIO $ S.query config "searcher" $ T.unpack qstring
    case sphinxRes' of
        ST.Ok sphinxRes -&gt; do
            let docids = map (Key . PersistInt64 . ST.documentId) $ ST.matches sphinxRes
            fmap catMaybes $ runDB $ forM docids $ \docid -&gt; do
                mdoc &lt;- get docid
                case mdoc of
                    Nothing -&gt; return Nothing
                    Just doc -&gt; liftIO $ Just &lt;$&gt; getResult docid doc qstring
        _ -&gt; error $ show sphinxRes'
  where
    config = S.defaultConfig
        { S.port = 9312
        , S.mode = ST.Any
        }

getSearchR :: Handler Html
getSearchR = do
    ((formRes, searchWidget), _) &lt;- runFormGet searchForm
    searchResults &lt;-
        case formRes of
            FormSuccess qstring -&gt; getResults qstring
            _ -&gt; return []
    defaultLayout $ do
        toWidget
            [lucius|
                .excerpt {
                    color: green; font-style: italic
                }
                .match {
                    background-color: yellow;
                }
            |]
        [whamlet|
            &lt;form method=get action=@{SearchR}&gt;
                ^{searchWidget}
                &lt;input type=submit value=Search&gt;
            $if not $ null searchResults
                &lt;h1&gt;Results
                $forall result &lt;- searchResults
                    &lt;div .result&gt;
                        &lt;a href=@{DocR $ resultId result}&gt;#{resultTitle result}
                        &lt;div .excerpt&gt;#{resultExcerpt result}
        |]

getXmlpipeR :: Handler TypedContent
getXmlpipeR =
    respondSourceDB "text/xml"
 $  fullDocSource
 $= renderBuilder def
 $= CL.map Chunk

entityToEvents :: (Entity Doc) -&gt; [X.Event]
entityToEvents (Entity docid doc) =
    [ X.EventBeginElement document [("id", [X.ContentText $ toPathPiece docid])]
    , X.EventBeginElement content []
    , X.EventContent $ X.ContentText $ unTextarea $ docContent doc
    , X.EventEndElement content
    , X.EventEndElement document
    ]

fullDocSource :: Source (YesodDB Searcher) X.Event
fullDocSource = do
    mapM_ yield startEvents
    docSource
    mapM_ yield endEvents

docSource :: Source (YesodDB Searcher) X.Event
docSource = selectSource [] [] $= CL.concatMap entityToEvents

toName :: Text -&gt; X.Name
toName x = X.Name x (Just "http://sphinxsearch.com/") (Just "sphinx")

docset, schema, field, document, content :: X.Name
docset = toName "docset"
schema = toName "schema"
field = toName "field"
document = toName "document"
content = "content" -- no prefix

startEvents, endEvents :: [X.Event]
startEvents =
    [ X.EventBeginDocument
    , X.EventBeginElement docset []
    , X.EventBeginElement schema []
    , X.EventBeginElement field [("name", [X.ContentText "content"])]
    , X.EventEndElement field
    , X.EventEndElement schema
    ]

endEvents =
    [ X.EventEndElement docset
    ]

main :: IO ()
main = withSqlitePool "searcher.db3" 10 $ \pool -&gt; do
    runStdoutLoggingT $ runSqlPool (runMigration migrateAll) pool
    warp 3000 $ Searcher pool</programlisting>
</section>
</section>
</article>
