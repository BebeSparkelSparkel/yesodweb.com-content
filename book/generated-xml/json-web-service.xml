<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="json-web-service_json_web_service">
<title>JSON Web Service</title>
<simpara>Let&#8217;s create a very simple web service: it takes a JSON request and returns a
JSON response. We&#8217;re going to write the server in WAI/Warp, and the client in
http-conduit. We&#8217;ll be using aeson for JSON parsing and rendering. We could
also write the server in Yesod itself, but for such a simple example, the extra
features of Yesod don&#8217;t add much.</simpara>
<section id="json-web-service_server">
<title>Server</title>
<simpara>WAI uses the conduit package to handle streaming request bodies, and
efficiently generates responses using blaze-builder. aeson uses attoparsec for
parsing; by using attoparsec-conduit we get easy interoperability with WAI.
This plays out as:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-}
import           Control.Exception        (SomeException)
import           Control.Exception.Lifted (handle)
import           Control.Monad.IO.Class   (liftIO)
import           Data.Aeson               (Value, encode, object, (.=))
import           Data.Aeson.Parser        (json)
import           Data.ByteString          (ByteString)
import           Data.Conduit             (($$))
import           Data.Conduit.Attoparsec  (sinkParser)
import           Network.HTTP.Types       (status200, status400)
import           Network.Wai              (Application, Response, responseLBS)
import           Network.Wai.Conduit      (sourceRequestBody)
import           Network.Wai.Handler.Warp (run)

main :: IO ()
main = run 3000 app

app :: Application
app req sendResponse = handle (sendResponse . invalidJson) $ do
    value &lt;- sourceRequestBody req $$ sinkParser json
    newValue &lt;- liftIO $ modValue value
    sendResponse $ responseLBS
        status200
        [("Content-Type", "application/json")]
        $ encode newValue

invalidJson :: SomeException -&gt; Response
invalidJson ex = responseLBS
    status400
    [("Content-Type", "application/json")]
    $ encode $ object
        [ ("message" .= show ex)
        ]

-- Application-specific logic would go here.
modValue :: Value -&gt; IO Value
modValue = return</programlisting>
</section>
<section id="json-web-service_client">
<title>Client</title>
<simpara>http-conduit was written as a companion to WAI. It too uses <literal>conduit</literal> and
<literal>blaze-builder</literal> pervasively, meaning we once again get easy interop with
<literal>aeson</literal>. A few extra comments for those not familiar with <literal>http-conduit</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara>
A <literal>Manager</literal> is present to keep track of open connections, so that multiple
  requests to the same server use the same connection. You usually want to use
  the <literal>getGlobalManager</literal> function to get the global connection manager.
</simpara>
</listitem>
<listitem>
<simpara>
We need to know the size of our request body, which can&#8217;t be determined
  directly from a <literal>Builder</literal>. Instead, we convert the <literal>Builder</literal> into a lazy
  <literal>ByteString</literal> and take the size from there.
</simpara>
</listitem>
<listitem>
<simpara>
There are a number of different functions for initiating a request. We use
  <literal>http</literal>, which allows us to directly access the data stream. There are other
  higher level functions (such as <literal>httpLbs</literal>) that let you ignore the issues of
  sources and get the entire body directly.
</simpara>
</listitem>
</itemizedlist>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-}
import           Control.Monad.IO.Class  (liftIO)
import           Data.Aeson              (Value (Object, String))
import           Data.Aeson              (encode, object, (.=))
import           Data.Aeson.Parser       (json)
import           Data.Conduit            (($$+-))
import           Data.Conduit.Attoparsec (sinkParser)
import           Network.HTTP.Conduit    (RequestBody (RequestBodyLBS),
                                          Response (..), http, method, parseUrl,
                                          requestBody, getGlobalManager)

main :: IO ()
main = do
    manager &lt;- getGlobalManager
    value &lt;- liftIO makeValue
    -- We need to know the size of the request body, so we convert to a
    -- ByteString
    let valueBS = encode value
    req' &lt;- liftIO $ parseUrl "http://localhost:3000/"
    let req = req' { method = "POST", requestBody = RequestBodyLBS valueBS }
    res &lt;- http req manager
    resValue &lt;- responseBody res $$+- sinkParser json
    liftIO $ handleResponse resValue

-- Application-specific function to make the request value
makeValue :: IO Value
makeValue = return $ object
    [ ("foo" .= ("bar" :: String))
    ]

-- Application-specific function to handle the response from the server
handleResponse :: Value -&gt; IO ()
handleResponse = print</programlisting>
</section>
</section>
</article>
